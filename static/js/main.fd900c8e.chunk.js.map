{"version":3,"sources":["logo.svg","components/LandingPage/Section/InsertTodo/InsertTodo.jsx","components/LandingPage/Section/TodoCount/TodoCount.jsx","components/LandingPage/Section/TodoItem/TodoItem.jsx","components/LandingPage/Section/TodoList/ButtonList/ButtonList.jsx","components/LandingPage/Section/TodoList/TodoList.jsx","components/Header/Header.jsx","components/LandingPage/LandingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","InsertTodo","addTodoItem","useState","todoText","setTodoText","onSubmit","e","preventDefault","className","type","onChange","target","value","placeholder","TodoCount","todos","doingCnt","setDoingCnt","completedCnt","setCompletedCnt","useEffect","filter","todo","checked","length","TodoItem","delTodo","checkTodo","cn","text","onClick","id","ButtonList","changeListType","TodoList","typeTodos","setTypeTodos","_typeMessage","useRef","current","map","key","Header","LandingPage","setTodos","listType","setListType","todoId","newTodo","concat","t","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,0PCkC5BC,G,MA9BI,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACPC,mBAAS,IADF,mBAChCC,EADgC,KACtBC,EADsB,KAcvC,OACC,0BAAMC,SAPU,SAAAC,GAChBA,EAAEC,iBACFN,EAAYE,GACZC,EAAY,KAIcI,UAAU,eACnC,2BACCA,UAAU,aACVC,KAAK,OACLC,SAhBc,SAAAJ,GAChBA,EAAEC,iBACFH,EAAYE,EAAEK,OAAOC,QAenBA,MAAOT,EACPU,YAAY,wDAEb,4BAAQL,UAAU,kBAAkBC,KAAK,UAAzC,mBCJYK,G,MApBG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACAb,qBADA,mBACzBc,EADyB,KACfC,EADe,OAEQf,qBAFR,mBAEzBgB,EAFyB,KAEXC,EAFW,KAahC,OAJAC,qBAAU,WAJTH,EAAYF,EAAMM,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKC,WAAmBC,QACzDL,EAAgBJ,EAAMM,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKC,WAAkBC,UAK1D,CAACT,IAGH,uBAAGP,UAAU,cAAb,WACUQ,EADV,kBACmCE,K,+BCKtBO,EAlBE,SAAC,GAAkC,IAAhCH,EAA+B,EAA/BA,KAAMI,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC1BJ,EAAYD,EAAZC,QACR,OACC,wBAAIf,UAAU,aACb,4BAAQA,UAAWoB,IAAG,YAAa,CAAEL,aAAaD,EAAKO,MACvD,yBAAKrB,UAAU,YACD,IAAZe,EACA,kBAAC,IAAD,CAAeO,QAAS,kBAAMH,EAAUL,EAAKS,OAE7C,kBAAC,IAAD,CAAsBD,QAAS,kBAAMH,EAAUL,EAAKS,OAGrD,kBAAC,IAAD,CAAYD,QAAS,kBAAMJ,EAAQJ,EAAKS,UCoB7BC,G,MAlCI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,eAAgBxB,EAAW,EAAXA,KAC/BqB,EAAU,SAAArB,GACfwB,EAAexB,IAGhB,OACC,wBAAID,UAAU,oBACb,4BACC,4BAAQC,KAAK,SAASqB,QAAS,kBAAMA,EAAQ,QAAQtB,UAAoB,QAATC,GAAkB,UAAlF,WAID,4BACC,4BACCA,KAAK,SACLqB,QAAS,kBAAMA,EAAQ,UACvBtB,UAAoB,UAATC,GAAoB,UAHhC,aAQD,4BACC,4BACCA,KAAK,SACLqB,QAAS,kBAAMA,EAAQ,cACvBtB,UAAoB,cAATC,GAAwB,UAHpC,oBCYWyB,G,MA9BE,SAAC,GAAyD,IAAvDzB,EAAsD,EAAtDA,KAAMM,EAAgD,EAAhDA,MAAOkB,EAAyC,EAAzCA,eAAgBP,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAAgB,EACvCzB,mBAAS,IAD8B,mBAClEiC,EADkE,KACvDC,EADuD,KAEnEC,EAAeC,iBAAO,IAe5B,OAbAlB,qBAAU,WACI,UAATX,GACH4B,EAAaE,QAAU,aACvBH,EAAarB,EAAMM,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKC,aACpB,cAATd,GACV4B,EAAaE,QAAU,oBACvBH,EAAarB,EAAMM,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKC,cAEvCc,EAAaE,QAAU,mBACvBH,EAAarB,MAEZ,CAACN,EAAMM,IAGT,6BACC,kBAAC,EAAD,CAAYkB,eAAgBA,EAAgBxB,KAAMA,IAClD,wBAAID,UAAU,cAAc6B,EAAaE,SACzC,4BACEJ,EAAUK,KAAI,SAAAlB,GAAI,OAClB,kBAAC,EAAD,CAAUmB,IAAKnB,EAAKS,GAAIT,KAAMA,EAAMI,QAASA,EAASC,UAAWA,WClBvDe,G,YATA,WACd,OACC,gCACC,wBAAIlC,UAAU,SAAd,cACA,uBAAGA,UAAU,QAAb,mCCuEYmC,EAtEK,WAAO,IAAD,EACCzC,mBAAS,CAClC,CACC6B,GAAI,EACJF,KAAM,8CACNN,SAAS,GAEV,CACCQ,GAAI,EACJF,KAAM,gEACNN,SAAS,GAEV,CACCQ,GAAI,EACJF,KAAM,sBACNN,SAAS,GAEV,CACCQ,GAAI,EACJF,KAAM,2BACNN,SAAS,GAEV,CACCQ,GAAI,EACJF,KAAM,2BACNN,SAAS,KAzBc,mBAClBR,EADkB,KACX6B,EADW,OA6BO1C,mBAAS,OA7BhB,mBA6BlB2C,EA7BkB,KA6BRC,EA7BQ,KA8BnBC,EAAST,iBAAO,GAwBtB,OACC,yBAAK9B,UAAU,WACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYP,YAzBM,SAAAqB,GACnB,IAAM0B,EAAU,CACfjB,GAAIgB,EAAOR,UACXV,KAAMP,EACNC,SAAS,GAGVqB,EAAS7B,EAAMkC,OAAOD,OAmBrB,kBAAC,EAAD,CAAWjC,MAAOA,IAClB,kBAAC,EAAD,CACCA,MAAOA,EACPN,KAAMoC,EACNZ,eApBoB,SAAAxB,GACtBqC,EAAYrC,IAoBViB,QAba,SAAAK,GACfa,EAAS7B,EAAMM,QAAO,SAAA6B,GAAC,OAAIA,EAAEnB,KAAOA,OAalCJ,UAlBe,SAAAI,GACjBa,EAAS7B,EAAMyB,KAAI,SAAAU,GAAC,OAAKA,EAAEnB,KAAOA,EAAT,eAAmBmB,EAAnB,CAAsB3B,SAAU2B,EAAE3B,UAAY2B,WC9C1DC,MAJf,WACC,OAAO,kBAAC,EAAD,OCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fd900c8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './InsertTodo.css';\r\n\r\nconst InsertTodo = ({ addTodoItem }) => {\r\n\tconst [todoText, setTodoText] = useState('');\r\n\r\n\tconst onChange = e => {\r\n\t\te.preventDefault();\r\n\t\tsetTodoText(e.target.value);\r\n\t};\r\n\r\n\tconst onSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\taddTodoItem(todoText);\r\n\t\tsetTodoText('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={onSubmit} className=\"insert-form\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"todo-input\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t\tvalue={todoText}\r\n\t\t\t\tplaceholder=\"할 일을 적어주세요.\"\r\n\t\t\t/>\r\n\t\t\t<button className=\"todo-submit-btn\" type=\"submit\">\r\n\t\t\t\t추가\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default InsertTodo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './TodoCount.css';\r\n\r\nconst TodoCount = ({ todos }) => {\r\n\tconst [doingCnt, setDoingCnt] = useState();\r\n\tconst [completedCnt, setCompletedCnt] = useState();\r\n\r\n\tconst todoCount = () => {\r\n\t\tsetDoingCnt(todos.filter(todo => todo.checked === false).length);\r\n\t\tsetCompletedCnt(todos.filter(todo => todo.checked === true).length);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\ttodoCount();\r\n\t}, [todos]);\r\n\r\n\treturn (\r\n\t\t<p className=\"todo-count\">\r\n\t\t\tDoing : {doingCnt} || completed: {completedCnt}\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default TodoCount;\r\n","import React from 'react';\r\nimport './TodoItem.css';\r\nimport cn from 'classnames';\r\nimport { IoIosCheckboxOutline, IoIosCheckbox, IoIosTrash } from 'react-icons/io';\r\n\r\nconst TodoItem = ({ todo, delTodo, checkTodo }) => {\r\n\tconst { checked } = todo;\r\n\treturn (\r\n\t\t<li className=\"todo-item\">\r\n\t\t\t<strong className={cn('item-text', { checked })}>{todo.text}</strong>\r\n\t\t\t<div className=\"btn-box\">\r\n\t\t\t\t{checked === true ? (\r\n\t\t\t\t\t<IoIosCheckbox onClick={() => checkTodo(todo.id)} />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<IoIosCheckboxOutline onClick={() => checkTodo(todo.id)} />\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<IoIosTrash onClick={() => delTodo(todo.id)} />\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport './ButtonList.css';\r\n\r\nconst ButtonList = ({ changeListType, type }) => {\r\n\tconst onClick = type => {\r\n\t\tchangeListType(type);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ul className=\"todo-button-list\">\r\n\t\t\t<li>\r\n\t\t\t\t<button type=\"button\" onClick={() => onClick('all')} className={type === 'all' && 'active'}>\r\n\t\t\t\t\t|| ALL\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => onClick('doing')}\r\n\t\t\t\t\tclassName={type === 'doing' && 'active'}\r\n\t\t\t\t>\r\n\t\t\t\t\t|| DOING\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => onClick('completed')}\r\n\t\t\t\t\tclassName={type === 'completed' && 'active'}\r\n\t\t\t\t>\r\n\t\t\t\t\t|| COMPLETED\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default ButtonList;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect, useRef } from 'react';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport ButtonList from './ButtonList/ButtonList';\r\nimport './TodoList.css';\r\n\r\nconst TodoList = ({ type, todos, changeListType, delTodo, checkTodo }) => {\r\n\tconst [typeTodos, setTypeTodos] = useState([]);\r\n\tconst _typeMessage = useRef('');\r\n\r\n\tuseEffect(() => {\r\n\t\tif (type === 'doing') {\r\n\t\t\t_typeMessage.current = 'CHeer Up !';\r\n\t\t\tsetTypeTodos(todos.filter(todo => todo.checked === false));\r\n\t\t} else if (type === 'completed') {\r\n\t\t\t_typeMessage.current = 'Congratulations !';\r\n\t\t\tsetTypeTodos(todos.filter(todo => todo.checked === true));\r\n\t\t} else {\r\n\t\t\t_typeMessage.current = \"It's up to you !\";\r\n\t\t\tsetTypeTodos(todos);\r\n\t\t}\r\n\t}, [type, todos]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ButtonList changeListType={changeListType} type={type} />\r\n\t\t\t<h2 className=\"list-title\">{_typeMessage.current}</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t{typeTodos.map(todo => (\r\n\t\t\t\t\t<TodoItem key={todo.id} todo={todo} delTodo={delTodo} checkTodo={checkTodo} />\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1 className=\"title\">To-Do List</h1>\r\n\t\t\t<p className=\"desc\">what is your One Small Step?</p>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { useState, useRef } from 'react';\r\nimport InsertTodo from './Section/InsertTodo/InsertTodo';\r\nimport TodoCount from './Section/TodoCount/TodoCount';\r\nimport TodoList from './Section/TodoList/TodoList';\r\nimport './LandingPage.css';\r\nimport Header from '../Header/Header';\r\n\r\nconst LandingPage = () => {\r\n\tconst [todos, setTodos] = useState([\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\ttext: '리액트 공부하기',\r\n\t\t\tchecked: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\ttext: '자바스크립트 공부하기',\r\n\t\t\tchecked: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\ttext: '책 읽기',\r\n\t\t\tchecked: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\ttext: '게임하기',\r\n\t\t\tchecked: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 5,\r\n\t\t\ttext: '운동하기',\r\n\t\t\tchecked: false,\r\n\t\t},\r\n\t]);\r\n\r\n\tconst [listType, setListType] = useState('all');\r\n\tconst todoId = useRef(6);\r\n\r\n\tconst addTodoItem = todo => {\r\n\t\tconst newTodo = {\r\n\t\t\tid: todoId.current++,\r\n\t\t\ttext: todo,\r\n\t\t\tchecked: false,\r\n\t\t};\r\n\r\n\t\tsetTodos(todos.concat(newTodo));\r\n\t};\r\n\r\n\tconst changeListType = type => {\r\n\t\tsetListType(type);\r\n\t};\r\n\r\n\tconst checkTodo = id => {\r\n\t\tsetTodos(todos.map(t => (t.id === id ? { ...t, checked: !t.checked } : t)));\r\n\t};\r\n\r\n\tconst delTodo = id => {\r\n\t\tsetTodos(todos.filter(t => t.id !== id));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"landing\">\r\n\t\t\t<Header />\r\n\t\t\t<InsertTodo addTodoItem={addTodoItem} />\r\n\t\t\t<TodoCount todos={todos} />\r\n\t\t\t<TodoList\r\n\t\t\t\ttodos={todos}\r\n\t\t\t\ttype={listType}\r\n\t\t\t\tchangeListType={changeListType}\r\n\t\t\t\tdelTodo={delTodo}\r\n\t\t\t\tcheckTodo={checkTodo}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LandingPage from './components/LandingPage/LandingPage';\n\nfunction App() {\n\treturn <LandingPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}