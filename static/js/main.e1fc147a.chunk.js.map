{"version":3,"sources":["components/Header/Header.jsx","components/LandingPage/Section/InsertTodo/InsertTodo.jsx","components/LandingPage/Section/TodoCount/TodoCount.jsx","components/LandingPage/Section/TodoItem/TodoItem.jsx","components/LandingPage/Section/TodoList/ButtonList/ButtonList.jsx","components/LandingPage/Section/TodoList/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","memo","className","InsertTodo","todoContext","useContext","TodoContext","useState","todoText","setTodoText","onSubmit","e","preventDefault","todoDispatch","type","text","onChange","target","value","placeholder","TodoCount","todos","todoState","doingCnt","setDoingCnt","completedCnt","setCompletedCnt","useEffect","filter","todo","checked","length","TodoItem","cn","onClick","id","ButtonList","listType","TodoList","typeTodos","setTypeTodos","_typeMessage","useRef","current","map","key","React","createContext","initialState","todoId","reducer","state","action","App","useReducer","dispatch","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1fc147a.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = memo(() => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1 className=\"title\">To-Do List</h1>\r\n\t\t\t<p className=\"desc\">What is your One Small Step?</p>\r\n\t\t</header>\r\n\t);\r\n});\r\n\r\nexport default Header;\r\n","import React, { memo, useState, useContext } from 'react';\r\nimport { TodoContext } from '../../../../App';\r\nimport './InsertTodo.css';\r\n\r\nconst InsertTodo = memo(() => {\r\n\tconst todoContext = useContext(TodoContext);\r\n\tconst [todoText, setTodoText] = useState('');\r\n\r\n\tconst onChange = e => {\r\n\t\te.preventDefault();\r\n\t\tsetTodoText(e.target.value);\r\n\t};\r\n\r\n\tconst onSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\ttodoContext.todoDispatch({ type: 'ADD_TODO', text: todoText });\r\n\t\tsetTodoText('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={onSubmit} className=\"insert-form\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"todo-input\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t\tvalue={todoText}\r\n\t\t\t\tplaceholder=\"할 일을 적어주세요.\"\r\n\t\t\t/>\r\n\t\t\t<button className=\"todo-submit-btn\" type=\"submit\">\r\n\t\t\t\t추가\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n});\r\n\r\nexport default InsertTodo;\r\n","import React, { useState, useEffect, memo, useContext } from 'react';\r\nimport { TodoContext } from '../../../../App';\r\nimport './TodoCount.css';\r\n\r\nconst TodoCount = memo(() => {\r\n\tconst todoContext = useContext(TodoContext);\r\n\tconst { todos } = todoContext.todoState;\r\n\tconst [doingCnt, setDoingCnt] = useState();\r\n\tconst [completedCnt, setCompletedCnt] = useState();\r\n\r\n\tconst todoCount = () => {\r\n\t\tsetDoingCnt(todos.filter(todo => todo.checked === false).length);\r\n\t\tsetCompletedCnt(todos.filter(todo => todo.checked === true).length);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\ttodoCount();\r\n\t}, [todos]);\r\n\r\n\treturn (\r\n\t\t<p className=\"todo-count\">\r\n\t\t\tDoing : {doingCnt} || completed: {completedCnt}\r\n\t\t</p>\r\n\t);\r\n});\r\n\r\nexport default TodoCount;\r\n","import React, { memo, useContext } from 'react';\r\nimport './TodoItem.css';\r\nimport cn from 'classnames';\r\nimport { IoIosCheckboxOutline, IoIosCheckbox, IoIosTrash } from 'react-icons/io';\r\nimport { TodoContext } from '../../../../App';\r\n\r\nconst TodoItem = memo(({ todo }) => {\r\n\tconst todoContext = useContext(TodoContext);\r\n\tconst { todoDispatch } = todoContext;\r\n\r\n\tconst { checked } = todo;\r\n\treturn (\r\n\t\t<li className=\"todo-item\">\r\n\t\t\t<strong className={cn('item-text', { checked })}>{todo.text}</strong>\r\n\t\t\t<div className=\"btn-box\">\r\n\t\t\t\t{checked === true ? (\r\n\t\t\t\t\t<IoIosCheckbox onClick={() => todoDispatch({ type: 'CHECK_TODO', id: todo.id })} />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<IoIosCheckboxOutline onClick={() => todoDispatch({ type: 'CHECK_TODO', id: todo.id })} />\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<IoIosTrash onClick={() => todoDispatch({ type: 'DELETE_TODO', id: todo.id })} />\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t);\r\n});\r\n\r\nexport default TodoItem;\r\n","import React, { memo, useContext } from 'react';\r\nimport { TodoContext } from '../../../../../App';\r\nimport './ButtonList.css';\r\n\r\nconst ButtonList = memo(() => {\r\n\tconst todoContext = useContext(TodoContext);\r\n\tconst { listType } = todoContext.todoState;\r\n\r\n\tconst onClick = type => {\r\n\t\ttodoContext.todoDispatch({ type: 'CHANGE_LIST_TYPE', listType: type });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ul className=\"todo-button-list\">\r\n\t\t\t<li>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => onClick('all')}\r\n\t\t\t\t\tclassName={listType === 'all' ? 'active' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\t|| ALL\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => onClick('doing')}\r\n\t\t\t\t\tclassName={listType === 'doing' ? 'active' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\t|| DOING\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => onClick('completed')}\r\n\t\t\t\t\tclassName={listType === 'completed' ? 'active' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\t|| COMPLETED\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t);\r\n});\r\n\r\nexport default ButtonList;\r\n","import React, { useState, useEffect, useRef, memo, useContext } from 'react';\r\nimport { TodoContext } from '../../../../App';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport ButtonList from './ButtonList/ButtonList';\r\nimport './TodoList.css';\r\n\r\nconst TodoList = memo(() => {\r\n\tconst todoContext = useContext(TodoContext);\r\n\tconst { listType, todos } = todoContext.todoState;\r\n\r\n\tconst [typeTodos, setTypeTodos] = useState([]);\r\n\tconst _typeMessage = useRef('');\r\n\r\n\tuseEffect(() => {\r\n\t\tif (listType === 'doing') {\r\n\t\t\t_typeMessage.current = 'Cheer Up !';\r\n\t\t\tsetTypeTodos(todos.filter(todo => todo.checked === false));\r\n\t\t} else if (listType === 'completed') {\r\n\t\t\t_typeMessage.current = 'Congratulations !';\r\n\t\t\tsetTypeTodos(todos.filter(todo => todo.checked === true));\r\n\t\t} else {\r\n\t\t\t_typeMessage.current = \"It's up to you !\";\r\n\t\t\tsetTypeTodos(todos);\r\n\t\t}\r\n\t}, [listType, todos]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ButtonList />\r\n\t\t\t<h2 className=\"list-title\">{_typeMessage.current}</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t{typeTodos.map(todo => (\r\n\t\t\t\t\t<TodoItem key={todo.id} todo={todo} />\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\nexport default TodoList;\r\n","import React, { useReducer } from 'react';\nimport Header from './components/Header/Header';\nimport InsertTodo from './components/LandingPage/Section/InsertTodo/InsertTodo';\nimport TodoCount from './components/LandingPage/Section/TodoCount/TodoCount';\nimport TodoList from './components/LandingPage/Section/TodoList/TodoList';\nimport './App.css';\n\nexport const TodoContext = React.createContext();\n\nconst initialState = {\n\ttodos: [\n\t\t{\n\t\t\tid: 1,\n\t\t\ttext: '리액트 공부하기',\n\t\t\tchecked: true,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttext: '자바스크립트 공부하기',\n\t\t\tchecked: false,\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\ttext: '책 읽기',\n\t\t\tchecked: true,\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\ttext: '게임하기',\n\t\t\tchecked: true,\n\t\t},\n\t\t{\n\t\t\tid: 5,\n\t\t\ttext: '운동하기',\n\t\t\tchecked: false,\n\t\t},\n\t],\n\tlistType: 'all',\n};\n\nlet todoId = 6;\n\nconst reducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'ADD_TODO':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: [...state.todos, { id: todoId++, text: action.text, checked: false }],\n\t\t\t};\n\t\tcase 'CHECK_TODO':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: state.todos.map(todo =>\n\t\t\t\t\ttodo.id === action.id ? { ...todo, checked: !todo.checked } : todo,\n\t\t\t\t),\n\t\t\t};\n\t\tcase 'DELETE_TODO':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: state.todos.filter(todo => todo.id !== action.id),\n\t\t\t};\n\t\tcase 'CHANGE_LIST_TYPE':\n\t\t\treturn { ...state, listType: action.listType };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nfunction App() {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\treturn (\n\t\t<div className=\"landing\">\n\t\t\t<Header />\n\t\t\t<TodoContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\ttodoState: state,\n\t\t\t\t\ttodoDispatch: dispatch,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<InsertTodo />\n\t\t\t\t<TodoCount />\n\t\t\t\t<TodoList />\n\t\t\t</TodoContext.Provider>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}