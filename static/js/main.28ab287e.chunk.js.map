{"version":3,"sources":["logo.svg","components/Section/InsertTodo/InsertTodo.jsx","components/Section/TodoItem/TodoItem.jsx","components/Section/TodoList/TodoList.jsx","components/LandingPage/LandingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","InsertTodo","addTodoItem","useState","todoText","setTodoText","onSubmit","e","preventDefault","type","onChange","target","value","placeholder","TodoItem","todo","delTodo","checkTodo","text","onClick","id","TodoList","todos","changeListType","typeTodos","setTypeTodos","_typeMessage","useRef","useEffect","current","filter","checked","map","key","LandingPage","setTodos","doingCnt","setDoingCnt","completedCnt","setCompletedCnt","listType","setListType","todoId","length","newTodo","concat","t","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28ab287e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst InsertTodo = ({ addTodoItem }) => {\r\n\tconst [todoText, setTodoText] = useState('');\r\n\r\n\tconst onChange = e => {\r\n\t\te.preventDefault();\r\n\t\tsetTodoText(e.target.value);\r\n\t};\r\n\r\n\tconst onSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\taddTodoItem(todoText);\r\n\t\tsetTodoText('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={onSubmit}>\r\n\t\t\t<input type=\"text\" onChange={onChange} value={todoText} placeholder=\"할 일을 적어주세요.\" />\r\n\t\t\t<button type=\"submit\">추가</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default InsertTodo;\r\n","import React from 'react';\r\n\r\nconst TodoItem = ({ todo, delTodo, checkTodo }) => {\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<strong>{todo.text}</strong>\r\n\t\t\t<button type=\"button\" onClick={() => checkTodo(todo.id)}>\r\n\t\t\t\tcheck\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" onClick={() => delTodo(todo.id)}>\r\n\t\t\t\t삭제\r\n\t\t\t</button>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect, useRef } from 'react';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\n\r\nconst TodoList = ({ type, todos, changeListType, delTodo, checkTodo }) => {\r\n\tconst [typeTodos, setTypeTodos] = useState([]);\r\n\tconst _typeMessage = useRef('');\r\n\r\n\tuseEffect(() => {\r\n\t\tif (type === 'doing') {\r\n\t\t\t_typeMessage.current = 'doing';\r\n\t\t\tsetTypeTodos(todos.filter(todo => todo.checked === false));\r\n\t\t} else if (type === 'completed') {\r\n\t\t\t_typeMessage.current = 'completed';\r\n\t\t\tsetTypeTodos(todos.filter(todo => todo.checked === true));\r\n\t\t} else {\r\n\t\t\t_typeMessage.current = 'all';\r\n\t\t\tsetTypeTodos(todos);\r\n\t\t}\r\n\t}, [type, todos]);\r\n\r\n\tconst onClick = type => {\r\n\t\tchangeListType(type);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<button type=\"button\" onClick={() => onClick('all')}>\r\n\t\t\t\t\t\t|| ALL\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<button type=\"button\" onClick={() => onClick('doing')}>\r\n\t\t\t\t\t\t|| DOING\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<button type=\"button\" onClick={() => onClick('completed')}>\r\n\t\t\t\t\t\t|| COMPLETED\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<h2>{_typeMessage.current}</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t{typeTodos.map(todo => (\r\n\t\t\t\t\t<TodoItem key={todo.id} todo={todo} delTodo={delTodo} checkTodo={checkTodo} />\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState, useRef } from 'react';\r\nimport InsertTodo from '../Section/InsertTodo/InsertTodo';\r\nimport TodoList from '../Section/TodoList/TodoList';\r\n\r\nconst LandingPage = () => {\r\n\tconst [todos, setTodos] = useState([\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\ttext: '리액트 공부하기',\r\n\t\t\tchecked: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\ttext: '자바스크립트 공부하기',\r\n\t\t\tchecked: false,\r\n\t\t},\r\n\t]);\r\n\r\n\tconst [doingCnt, setDoingCnt] = useState();\r\n\tconst [completedCnt, setCompletedCnt] = useState();\r\n\tconst [listType, setListType] = useState('all');\r\n\tconst todoId = useRef(3);\r\n\r\n\tconst addTodoItem = todo => {\r\n\t\tconst newTodo = {\r\n\t\t\tid: todoId.current++,\r\n\t\t\ttext: todo,\r\n\t\t\tchecked: false,\r\n\t\t};\r\n\r\n\t\tsetTodos(todos.concat(newTodo));\r\n\t};\r\n\r\n\tconst todoCount = () => {\r\n\t\tsetDoingCnt(todos.filter(todo => todo.checked === false).length);\r\n\t\tsetCompletedCnt(todos.filter(todo => todo.checked === true).length);\r\n\t};\r\n\r\n\tconst changeListType = type => {\r\n\t\tsetListType(type);\r\n\t};\r\n\r\n\tconst checkTodo = id => {\r\n\t\tsetTodos(todos.map(t => (t.id === id ? { ...t, checked: !t.checked } : t)));\r\n\t};\r\n\r\n\tconst delTodo = id => {\r\n\t\tsetTodos(todos.filter(t => t.id !== id));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\ttodoCount();\r\n\t}, [todos]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<header>\r\n\t\t\t\t<h1>To-Do List</h1>\r\n\t\t\t\t<p>what is your One Small Step?</p>\r\n\t\t\t</header>\r\n\t\t\t<InsertTodo addTodoItem={addTodoItem} />\r\n\t\t\t{/* TodoCount */}\r\n\t\t\t<p>\r\n\t\t\t\tDoing : {doingCnt} || completed: {completedCnt}\r\n\t\t\t</p>\r\n\t\t\t<TodoList\r\n\t\t\t\ttodos={todos}\r\n\t\t\t\ttype={listType}\r\n\t\t\t\tchangeListType={changeListType}\r\n\t\t\t\tdelTodo={delTodo}\r\n\t\t\t\tcheckTodo={checkTodo}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LandingPage from './components/LandingPage/LandingPage';\n\nfunction App() {\n\treturn <LandingPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}